#!/bin/sh
# Init script for <%= @application_name %>
# Originally generated by pleaserun.
# Implemented based on LSB Core 3.1:
#   * Sections: 20.2, 20.3
#
### BEGIN INIT INFO
# Provides:          the_application_name
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description:
# Description:       no description given
### END INIT INFO

PATH=/usr/local/bin:/sbin:/usr/sbin:/bin:/usr/bin
export PATH

<% @environment.each do |key, value| %>
export "<%= key %>"="<%= value %>"
<% end %>

name=<%= @application_name %>
pidfile="/var/run/$name.pid"

[ -r /etc/default/$name ] && . /etc/default/$name
[ -r /etc/sysconfig/$name ] && . /etc/sysconfig/$name

start() {

  # Run the program!
  chroot --userspec <%= @deploy[:user] %>:<%= @deploy[:group] %> / sh -c "
    cd <%= @deploy[:deploy_to] %>/current
    exec /usr/local/bin/bundle exec aws-flow-ruby -f runner_config.json
  " > /var/log/$name.log 2> /var/log/$name.err &

  # Generate the pidfile from here. If we instead made the forked process
  # generate it there will be a race condition between the pidfile writing
  # and a process possibly asking for status.
  echo $! > $pidfile

  # Check that the process is still running after 5 seconds
  sleep 5
  if status ; then
    echo "$name started."
    return 0
  else
    echo "$name failed to start"
    cat /var/log/$name.log
    cat /var/log/$name.err
    return 1
  fi
}

stop() {
  # Try to kill INT the program (graceful shutdown of the workers)
  if status ; then
    pid=`cat "$pidfile"`
    echo "Killing $name (pid $pid) with INT"
    kill -INT $pid
    # Wait for it to exit, up to 50 seconds.
    for i in 1 2 3 4 5 ; do
      echo "Waiting $name (pid $pid) to die..."
      status || break
      sleep 10
    done
    # make sure it exited or induce a less graceful exit by sending INT again
    if status ; then
      kill -INT $pid
      sleep 5
    fi
    if status ; then
      echo "$name stop failed; still running."
    else
      echo "$name stopped."
    fi
  fi
}

status() {
  if [ -f "$pidfile" ] ; then
    pid=`cat "$pidfile"`
    if kill -0 $pid > /dev/null 2> /dev/null ; then
      # process by this pid is running.
      # It may not be our pid, but that's what you get with just pidfiles.
      # TODO(sissel): Check if this process seems to be the same as the one we
      # expect. It'd be nice to use flock here, but flock uses fork, not exec,
      # so it makes it quite awkward to use in this case.
      return 0
    else
      return 2 # program is dead but pid file exists
    fi
  else
    return 3 # program is not running
  fi
}

force_stop() {
  if status ; then
    stop
    status && kill -KILL `cat "$pidfile"`
  fi
}


case "$1" in
  start)
    status
    code=$?
    if [ $code -eq 0 ]; then
      echo "$name is already running"
    else
      start
    fi
    exit $code
    ;;
  stop) stop ;;
  force-stop) force_stop ;;
  status)
    status
    code=$?
    if [ $code -eq 0 ] ; then
      echo "$name is running"
    else
      echo "$name is not running"
    fi
    exit $code
    ;;
  restart)

    stop && start
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|force-stop|status|restart}" >&2
    exit 3
  ;;
esac

exit $?
