###################
# Generated by Chef
###################

# ---------------------------------------------------------------------------

#
# This file configures the New Relic Python Agent.
#
# The path to the configuration file should be supplied to the function
# newrelic.agent.initialize() when the agent is being initialized.
#
# The configuration file follows a structure similar to what you would
# find for Microsoft Windows INI files. For further information on the
# configuration file format see the Python ConfigParser documentation at:
#
#    http://docs.python.org/library/configparser.html
#
# For further discussion on the behaviour of the Python agent that can
# be configured via this configuration file see:
#
#    http://newrelic.com/docs/python/python-agent-configuration
#

# ---------------------------------------------------------------------------

# Here are the settings that are common to all environments.

[newrelic]

# You must specify the license key associated with your New
# Relic account. This key binds the Python Agent's data to your
# account in the New Relic service.
license_key = <%= @license %>

# The appplication name. Set this to be the name of your
# application as you would like it to show up in New Relic UI.
# The UI will then auto-map instances of your application into a
# entry on your home dashboard page.
<% if @app_name.nil? %>
app_name = Python Application
<% else %>
app_name = <%= @app_name %>
<% end %>

# In order for high security to be enabled, this property must be set to true and the high security property in the New Relic user
# interface must be enabled. Enabling high security means SSL is turned on, request and message queue parameters are not collected, and
# SQL cannot be sent to New Relic in its raw form.
<% unless @high_security.nil? %>
high_security: <%= @high_security %>
<% end %>

# When "true", the agent collects performance data about your
# application and reports this data to the New Relic UI at
# newrelic.com. This global switch is normally overridden for
# each environment below.
<% if @enabled.nil? %>
monitor_mode = true
<% else %>
monitor_mode = <%= @enabled %>
<% end %>

# Sets the name of a file to log agent messages to. Useful for
# debugging any issues with the agent. This is not set by
# default as it is not known in advance what user your web
# application processes will run as and where they have
# permission to write to. Whatever you set this to you must
# ensure that the permissions for the containing directory and
# the file itself are correct, and that the user that your web
# application runs as can write to the file. If not able to
# write out a log file, it is also possible to say "stderr" and
# output to standard error output. This would normally result in
# output appearing in your web server log.
<% if @logfile.nil? %>
log_file = /tmp/newrelic-python-agent.log
<% else %>
log_file = <%= @logfile %>
<% end %>

# Sets the level of detail of messages sent to the log file, if
# a log file location has been provided. Possible values, in
# increasing order of detail, are: "critical", "error", "warning",
# "info" and "debug". When reporting any agent issues to New
# Relic technical support, the most useful setting for the
# support engineers is "debug". However, this can generate a lot
# of information very quickly, so it is best not to keep the
# agent at this level for longer than it takes to reproduce the
# problem you are experiencing.
<% if @loglevel.nil? %>
log_level = info
<% else %>
log_level = <%= @loglevel %>
<% end %>

# The Python Agent communicates with the New Relic service using
# HTTP by default. If you want to communicate via HTTPS to
# increase security, then turn on SSL by setting this value to
# true. Note, this will result in increased CPU overhead to
# perform the encryption involved in SSL communication, but this
# work is done asynchronously to the threads that process your
# application code, so it should not impact response times.
<% if @daemon_ssl.nil? %>
ssl = false
<% else %>
ssl = <%= @daemon_ssl %>
<% end %>

# The Python Agent will attempt to connect directly to the New
# Relic service. If there is an intermediate firewall between
# your host and the New Relic service that requires you to use a
# HTTP proxy, then you should set both the "proxy_host" and
# "proxy_port" settings to the required values for the HTTP
# proxy. The "proxy_user" and "proxy_pass" settings should
# additionally be set if proxy authentication is implemented by
# the HTTP proxy.
# proxy_host = hostname
# proxy_port = 8080
# proxy_user =
# proxy_pass =

# Tells the transaction tracer and error collector (when
# enabled) whether or not to capture the query string for the
# URL and send it as the request parameters for display in the
# UI. When "true", it is still possible to exclude specific
# values from being captured using the "ignored_params" setting.
<% if @capture_params.nil? %>
capture_params = false
<% else %>
capture_params = <%= @capture_params %>
<% end %>

# Space separated list of variables that should be removed from
# the query string captured for display as the request
# parameters in the UI.
<% if @ignored_params.nil? %>
ignored_params =
<% else %>
ignored_params = <%= @ignored_params %>
<% end %>

# The transaction tracer captures deep information about slow
# transactions and sends this to the UI on a periodic basis. The
# transaction tracer is enabled by default. Set this to "false"
# to turn it off.
<% if @transaction_tracer_enable.nil? %>
transaction_tracer.enabled = true
<% else %>
transaction_tracer.enabled = <%= @transaction_tracer_enable %>
<% end %>

# Threshold in seconds for when to collect a transaction trace.
# When the response time of a controller action exceeds this
# threshold, a transaction trace will be recorded and sent to
# the UI. Valid values are any positive float value, or (default)
# "apdex_f", which will use the threshold for a dissatisfying
# Apdex controller action - four times the Apdex T value.
<% if @transaction_tracer_threshold.nil? %>
transaction_tracer.transaction_threshold = apdex_f
<% else %>
transaction_tracer.transaction_threshold = "<%= @transaction_tracer_threshold %>"
<% end %>

# When the transaction tracer is on, SQL statements can
# optionally be recorded. The recorder has three modes, "off"
# which sends no SQL, "raw" which sends the SQL statement in its
# original form, and "obfuscated", which strips out numeric and
# string literals.
<% if @transaction_tracer_record_sql.nil? %>
transaction_tracer.record_sql = obfuscated
<% else %>
transaction_tracer.record_sql = <%= @transaction_tracer_record_sql %>
<% end %>

# Threshold in seconds for when to collect stack trace for a SQL
# call. In other words, when SQL statements exceed this
# threshold, then capture and send to the UI the current stack
# trace. This is helpful for pinpointing where long SQL calls
# originate from in an application.
<% if @transaction_tracer_stack_trace_threshold.nil? %>
transaction_tracer.stack_trace_threshold = 0.5
<% else %>
transaction_tracer.stack_trace_threshold = <%= @transaction_tracer_stack_trace_threshold %>
<% end %>

# Determines whether the agent will capture query plans for slow
# SQL queries. Only supported in MySQL and PostgreSQL. Set this
# to "false" to turn it off.
<% if @transaction_tracer_slow_sql.nil? %>
transaction_tracer.explain_enabled = true
<% else %>
transaction_tracer.explain_enabled = <%= @transaction_tracer_slow_sql %>
<% end %>

# Threshold for query execution time below which query plans
# will not not be captured. Relevant only when "explain_enabled"
# is true.
<% if @transaction_tracer_explain_threshold.nil? %>
transaction_tracer.explain_threshold = 0.5
<% else %>
transaction_tracer.explain_threshold = <%= @transaction_tracer_explain_threshold %>
<% end %>

# Space separated list of function or method names in form
# 'module:function' or 'module:class.function' for which
# additional function timing instrumentation will be added.
transaction_tracer.function_trace =

# The error collector captures information about uncaught
# exceptions or logged exceptions and sends them to UI for
# viewing. The error collector is enabled by default. Set this
# to "false" to turn it off.
<% if @error_collector_enable.nil? %>
error_collector.enabled = true
<% else %>
error_collector.enabled = <%= @error_collector_enable %>
<% end %>

# To stop specific errors from reporting to the UI, set this to
# a space separated list of the Python exception type names to
# ignore. The exception name should be of the form 'module:class'.
<% if @error_collector_ignore_errors.nil? %>
error_collector.ignore_errors =
<% else %>
error_collector.ignore_errors = <%= @error_collector_ignore_errors %>
<% end %>

# Browser monitoring is the Real User Monitoring feature of the UI.
# For those Python web frameworks that are supported, this
# setting enables the auto-insertion of the browser monitoring
# JavaScript fragments.
<% if @browser_monitoring_auto_instrument.nil? %>
browser_monitoring.auto_instrument = true
<% else %>
browser_monitoring.auto_instrument = <%= @browser_monitoring_auto_instrument %>
<% end %>

# A thread profiling session can be scheduled via the UI when
# this option is enabled. The thread profiler will periodically
# capture a snapshot of the call stack for each active thread in
# the application to construct a statistically representative
# call tree.
<% if @thread_profiler_enable.nil? %>
thread_profiler.enabled = true
<% else %>
thread_profiler.enabled = <%= @thread_profiler_enable %>
<% end %>

# Enable or disable the cross application tracer.
# The cross application tracer inserts HTTP headers into outbound requests
# and the response in order to link together web transaction metrics and
# transaction traces between applications.
<% if @cross_application_tracer_enable.nil? %>
# cross_application_tracer.enabled = true
<% else %>
cross_application_tracer.enabled = <%= @cross_application_tracer_enable %>
<% end %>

<% unless @feature_flag.nil? %>
# Feature flag
# eg. use for improved Tornado instrumentation
# (https://docs.newrelic.com/docs/release-notes/agent-release-notes/python-release-notes/python-agent-232028)
feature_flag = @feature_flag
<% end %>
